using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GreedyAlg
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            comboBox1.Text = comboBox1.Items[0].ToString();//заповнення комбобокса першим значенням
        }

        private void button1_Click(object sender, EventArgs e)
        {
            textBox1.Text = "";
            textBox2.Text = "";
            string[] nameCity = new string[] {"Вінниця","Дніпропетровськ","Донецьк","Житомир","Запоріжжя",
                                               "Ів-Франківськ","Київ","Кіровоград","Луганськ","Луцьк",
                                               "Львів", "Миколаїв" ,"Одеса" ,"Полтава" ,"Рівне",
                                               "Сімферополь", "Суми", "Тернопіль", "Ужгород", "Харків",
                                                "Херсон", "Хмельницький","Черкаси", "Чернівці", "Чернігів"};
            int[,] Distance = new int[25, 25]{
           /*1*/{0,645,868,125,748,366,256,316,1057,382,360,471,428,593,311,844,602,232,575,734,521,120,343,312,396},
           /*2*/{645,0,252,664,81,901,533,294,394,805,975,343,468,196,957,446,430,877,1130,213,376,765,324,891,672},
           /*3*/{868,252,0,858,217,1171,727,520,148,1111,1221,611,731,390,1045,591,706,1100,1391,335,560,988,547,1141,867},
           /*4*/{125,664,858,0,738,431,131,407,1182,257,423,677,557,468,187,803,477,298,671,690,624,185,321,389,271},
           /*5*/{748,81,217,738,0,1119,607,303,365,681,833,377,497,270,925,365,477,977,1488,287,297,875,405,957,747},
           /*6*/{366,901,1171,431,1119,0,561,618,1402,328,135,747,627,898,296,1070,908,134,280,1040,798,246,709,143,701},
           /*7*/{256,533,727,131,607,561,0,298,811,388,550,490,489,337,318,972,346,427,806,478,551,315,190,538,149},
           /*8*/{316,294,520,407,303,618,298,0,668,664,710,174,294,246,627,570,506,547,883,387,225,435,126,637,363},
           /*9*/{1057,394,148,1182,365,1402,811,668,0,1199,1379,857,977,474,1129,739,253,1289,1539,333,806,1177,706,1292,951},
          /*10*/{382,805,1111,257,681,328,388,664,1199,0,152,780,856,725,70,1052,734,159,413,866,869,263,578,336,949},
          /*11*/{360,975,1221,423,833,135,550,710,1379,152,0,850,970,891,232,1173,896,128,261,1028,1141,240,740,278,690},
          /*12*/{471,343,611,677,377,747,490,174,857,780,850,0,120,420,864,282,681,754,999,556,51,590,300,642,640},
          /*13*/{428,468,731,557,497,627,489,294,977,856,970,120,0,540,741,392,800,660,1009,831,171,548,420,515,529},
          /*14*/{593,196,390,468,270,898,337,246,474,725,891,420,540,0,665,635,261,825,1149,141,471,653,279,892,477},
          /*15*/{311,957,1045,187,925,296,318,627,1129,70,232,864,741,665,0,1157,664,162,484,805,834,193,508,331,458},
          /*16*/{844,446,591,803,365,1070,972,570,739,1052,1173,282,392,635,1157,0,896,1097,1363,652,221,964,696,981,1112},
          /*17*/{602,430,706,477,477,908,346,506,253,734,896,681,800,261,664,896,0,774,1138,190,732,662,540,883,350},
          /*18*/{232,877,1100,298,977,134,427,547,1289,159,128,754,660,825,162,1097,774,0,338,987,831,112,575,176,568},
          /*19*/{575,1130,1391,671,1488,280,806,883,1539,413,261,999,1009,1149,484,1363,1138,338,0,1299,1065,455,984,444,951},
          /*20*/{734,213,335,690,287,1040,478,387,333,866,1028,556,831,141,805,652,190,987,1299,0,576,854,420,1036,608},
          /*21*/{521,376,560,624,297,798,551,225,806,869,1141,51,171,471,834,221,732,831,1065,576,0,641,351,713,691},
          /*22*/{120,765,988,185,875,246,315,435,1177,263,240,590,548,653,193,964,662,112,455,854,641,0,463,190,455},
          /*23*/{343,324,547,321,405,709,190,126,706,578,740,300,420,279,508,696,540,575,984,420,351,463,0,660,330},
          /*24*/{312,891,1141,389,957,143,538,637,1292,336,278,642,515,892,331,981,883,176,444,1036,713,190,660,0,695},
          /*25*/{396,672,867,271,747,701,149,363,951,949,690,640,529,477,458,1112,350,568,951,608,691,455,330,695,0}
                };


            dataGridView1.RowCount = Distance.GetLength(0);
            dataGridView1.ColumnCount = Distance.GetLength(1);
            for (int i = 0; i < nameCity.GetLength(0); i++)
            {
                dataGridView1.Columns[i].HeaderText = nameCity[i].ToString();
                dataGridView1.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders;
                dataGridView1.Rows[i].HeaderCell.Value = nameCity[i].ToString();
            }

            for (int i = 0; i < Distance.GetLength(0); i++) //заповнення таблиці dataGridView
            {
                for (int j = 0; j < Distance.GetLength(1); j++)
                {
                    dataGridView1.Rows[i].Cells[j].Value = Distance[i, j].ToString();
                }
            }

            //Greedy alg
            int N = 25, res = 0, min=-1, way_length = 0; // звичайне заповнення масиву.
            int[] Distance_res = new int[N - 1];


            bool[] Distance1 = new bool[N];

            int city_index = 0;
            for (int i = 0; i < N; i++) 
            {
                if (comboBox1.Text == nameCity[i])
                    city_index = i;
            }
            int tmp = city_index;


            Distance1[city_index] = true;//вибране місто вважається відвіданим

            for (int i = 0; i < N - 1; i++) // цикл по мiстах
            {
                min = -1; // початкове значення мiнiмуму
                for (int j = 0; j < N; j++) // цикл по вiдстанях мiж мiстом, з вишенаписанного циклу i iншими мiстами
                    if (!Distance1[j] && Distance[tmp, j] > 0) //! Distance1 [j] - якщо мiсто j ще не вiдвiдували i Distance [tmp] [j]> 0 - шлях з мiста в якому перебуваємо tmp в мiсто j є
                    {
                        if (min == -1)  // якщо мiнiмум дорiвнює -1, то мiнiмум привласнити iндексу
                        {               // якщо не -1, то порiвнюємо значення i шукаємо мiнiмальне серед них
                          min = j;
                        }
                        else
                        {// ну тут вважаємо все робиться аналогiчно циклу заповнення вiдстаней
                            // тiльки тут замiсть того, щоб вводити значення в масиви мiж мiстами,
                            // їх тут порiвнюють. беруть вiдстань мiж першим i второи мiстом i порiвнюється з першим i 3им.
                            // потiм першим i четвертим i так далi. Збiльшили i, мiсто вже став другим i заново пiшов цикл. Мiж другим i 3им мiстом
                            // тому що мiж другим i першим мiстом порiвняння було б на попередньому етапi, коли i = 1 (ну 1-ий мiсто зi другу порiвнювали).
                            // сенс ще раз порiвнювати 2ий з перших))
                            if (Distance[tmp, j] < Distance[tmp, min])
                            {
                                min = j;
                            }
                        }
                    }
                
                Distance_res[res++] = min; // записали цю мiнiмальну вiдстань
                // перед цим знайшли, що найкоротший шлях з вершини де зараз знаходимося tmp лежить в врешiнi з iндексом min
                Distance1[min] = true; // помiчаємо вершину min як пройдену
                way_length += Distance[tmp, min]; //додаємо до загального шляху
                tmp = min; // вважаємо що вершина де зараз знаходимося - вершина з iндексом min (переходимо з вершини tmp в вершину min)
               
            }

            way_length += Distance[city_index, min];//додаємо до загального шляху повернення до початкового міста
            textBox2.Text = way_length + " км"; 
            textBox1.Text = textBox1.Text + comboBox1.Text;
            for (int i = 0; i < N - 1; i++) // звичайний вивiд результуючого масиву
            {
                textBox1.Text = textBox1.Text +" -> "+ nameCity[Distance_res[i]].ToString();
            }
            textBox1.Text = textBox1.Text + " -> " + comboBox1.Text;
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}
